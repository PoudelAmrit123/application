name: Building the docker image 

on:
 workflow_run:
    workflows: ["Release"]
    types:
      - completed
#  push:
#    branches:
#      - dev
#      - main
#    paths:
#      - 'frontend/**'
#      - 'backend1/**'
#      - 'backend2/**'

   
env:
  CLERK_PUBLISHABLE_KEY: ${{ vars.CLERK_PUBLISHABLE_KEY }}
  DB_CLIENT: ${{ vars.DB_CLIENT }}
  DB_HOST: ${{ vars.DB_HOST }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ vars.DB_PORT }}
  DB_USER: ${{ vars.DB_USER }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  VITE_CLERK_PUBLISHABLE_KEY: ${{ vars.VITE_CLERK_PUBLISHABLE_KEY }}
  CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

jobs:
  changes:
   runs-on: ubuntu-latest
   outputs:
     frontend: ${{ steps.filter.outputs.frontend }}
     backend1: ${{ steps.filter.outputs.backend1 }}
     backend2: ${{ steps.filter.outputs.backend2 }}
   steps:
     - name: Code Cloning 
       uses: actions/checkout@v4
       with:
        persist-credentials: false
     - name: Detect Changed directories
       id: filter
       uses: dorny/paths-filter@v3
       with:
        filters: |
          backend1:
            - 'backend1/**'
          frontend:
            - 'frontend/**'
          backend2: 
            - 'backend2/**'

  # frontend:
   
  #   needs: ['changes' ]
  #   if: ${{ needs.changes.outputs.frontend == 'true' }}
  #   runs-on: frontend
  #   environment: >
  #     ${{ startsWith(github.ref_name, 'feature/') && 'feature' ||
  #         github.ref_name == 'dev' && 'dev' ||
  #         github.ref_name == 'main' && 'main' }}
  #   steps:
  #     - name: Test
  #       run: echo "Hello from the frontend"
  #     - name: Code Cloning to frontend Runner.
  #       uses: actions/checkout@v4
  #     - name: Docker login
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Cache node modules
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           **/node_modules
  #         key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-modules-
  #     - name: Get latest tag
  #       id: get_tag
  #       run: |
  #         git fetch --tags
  #         VERSION=$(git describe --tags --abbrev=0 --always)
  #         echo "Latest tag is $VERSION"
  #         echo "FRONTEND_VERSION=${VERSION}" >> $GITHUB_ENV
     

  #     - name: Building the Frontend Image
  #       run: |
  #         docker build -t amritpoudel/frontend:${{ github.ref_name }}-${{ github.sha }} --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ vars.VITE_CLERK_PUBLISHABLE_KEY}}  ./frontend

  #         docker tag amritpoudel/frontend:${{ github.ref_name }}-${{ github.sha }} amritpoudel/frontend:${{  env.FRONTEND_VERSION }}

  #         docker push amritpoudel/frontend:${{  env.FRONTEND_VERSION }}

  #         if [ "${{ github.ref_name }}" = "main" ]; then
  #         docker tag amritpoudel/frontend:${{ github.ref_name }}-${{ github.sha }} amritpoudel/frontend:latest
  #         docker push amritpoudel/frontend:latest
  #         fi
      
          
  #     - name: Saving Docker image as artifacts
  #       run: |
  #        docker save -o frontend-image.tar amritpoudel/frontend:${{  env.FRONTEND_VERSION }}
  #     - name : Upload Frontend image  artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: frontend-image
  #         path: frontend-image.tar
      


      

      

      
     

  #     - name: Create GitHub Release
  #       if: github.ref_name == 'main'
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{  env.FRONTEND_VERSION }}
  #         name: Release ${{  env.FRONTEND_VERSION }}
  #         files: |
  #           frontend-image.tar
            
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #     - name: Download Trivy HTML report template
  #       run: |
  #         mkdir -p .trivy/templates
  #         curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o .trivy/templates/html.tpl

  #     - name: Tirvy Scan
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: amritpoudel/frontend:${{  env.FRONTEND_VERSION }}
  #         format: template
  #         template: '@.trivy/templates/html.tpl'
  #         output: frontend-scan.html
  #     - name: Uploading frontend scan report 
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: frontend-report
  #         path: frontend-scan.html


  # backend1:
  #   needs: [changes]
  #   # needs: [changes, semantic-backend1]
  #   if: ${{ needs.changes.outputs.backend1 == 'true' }}
  #   runs-on: backend
  #   environment: >
  #     ${{ startsWith(github.ref_name, 'feature/') && 'feature' ||
  #         github.ref_name == 'dev' && 'dev' ||
  #         github.ref_name == 'main' && 'main' }}
  #   steps:
  #     - name: Test
  #       run: echo "Hello from the backend"
  #     - name: Code Cloning to ubuntu
  #       uses: actions/checkout@v4
    
  #     - name: Docker login
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
      
  #     - name: Get latest tag
  #       id: get_tag
  #       run: |
  #         git fetch --tags
  #         VERSION=$(git describe --tags --abbrev=0 --always)
  #         echo "Latest tag is $VERSION"
  #         echo "BACKEND1_VERSION=${VERSION}" >> $GITHUB_ENV

  #     - name: Building the Backend Image
  #       run: |
  #         docker build -t amritpoudel/backend1:${{ github.ref_name }}-${{ github.sha }} ./backend1

  #         docker tag amritpoudel/backend1:${{ github.ref_name }}-${{ github.sha }} amritpoudel/backend1:${{ env.BACKEND1_VERSION }}

  #         docker push amritpoudel/backend1:${{ env.BACKEND1_VERSION }}

  #         if [ "${{ github.ref_name }}" = "main" ]; then
  #         docker tag amritpoudel/backend1:${{ github.ref_name }}-${{ github.sha }} amritpoudel/backend1:latest
  #         docker push amritpoudel/backend1:latest
  #         fi
      
  #     - name: Saving Docker image as artifacts
  #       run: |
  #        docker save -o backend1-image.tar amritpoudel/backend1:${{ env.BACKEND1_VERSION }}
  #     - name : Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: backend1-image
  #         path: backend1-image.tar
      
        

  #     - name: Create GitHub Release
  #       if: github.ref_name == 'main'
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ env.BACKEND1_VERSION }}
  #         name: Release ${{ env.BACKEND1_VERSION }}
  #         files: |
  #           backend1-image.tar
            
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #     - name: Download Trivy HTML report template
  #       run: |
  #         mkdir -p .trivy/templates
  #         curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o .trivy/templates/html.tpl

  #     - name: Tirvy Scan
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: amritpoudel/backend1:${{ env.BACKEND1_VERSION }}
  #         format: template
  #         template: '@.trivy/templates/html.tpl'
  #         output: backend1-scan.html
  #     - name: Uploading backend1 scan report 
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: backend1-report
  #         path: backend1-scan.html 
  # backend2:
  #   # needs: [changes, semantic-backend2]
  #   needs: [changes]
  #   if: ${{ needs.changes.outputs.backend2 == 'true' }}
  #   runs-on: backend
  #   environment: >
  #     ${{ startsWith(github.ref_name, 'feature/') && 'feature' ||
  #         github.ref_name == 'dev' && 'dev' ||
  #         github.ref_name == 'main' && 'main' }}
  #   steps:
  #     - name: Test
  #       run: echo "Hello from the backend"
  #     - name: Code Cloning to ubuntu
  #       uses: actions/checkout@v4
  #     - name: Docker login
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Get latest tag
  #       id: get_tag
  #       run: |
  #         git fetch --tags
  #         VERSION=$(git describe --tags --abbrev=0 --always)
  #         echo "Latest tag is $VERSION"
  #         echo "BACKEND2_VERSION=${VERSION}" >> $GITHUB_ENV
      
  #     - name: Building the Backend Image
  #       run: |
  #         docker build -t amritpoudel/backend2:${{ github.ref_name }}-${{ github.sha }} ./backend2

  #         docker tag amritpoudel/backend2:${{ github.ref_name }}-${{ github.sha }} amritpoudel/backend2:${{ env.BACKEND2_VERSION }}

  #         docker push amritpoudel/backend2:${{ env.BACKEND2_VERSION }}

  #          if [ "${{ github.ref_name }}" = "main" ]; then
  #             docker tag amritpoudel/backend2:${{ github.ref_name }}-${{ github.sha }} amritpoudel/backend2:${{ env.BACKEND2_VERSION }}

  #             docker push amritpoudel/backend2:${{ env.BACKEND2_VERSION }}
  #             docker tag amritpoudel/backend2:${{ github.ref_name }}-${{ github.sha }} amritpoudel/backend2:latest
  #             docker push amritpoudel/backend2:latest
  #         fi
  #     - name: Saving Docker image as artifacts
  #       run: |
  #        docker save -o backend2-image.tar amritpoudel/backend2:${{ env.BACKEND2_VERSION }}
  #     - name : Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: backend2-image
  #         path: backend2-image.tar


      

  #     - name: Create GitHub Release
  #       if: github.ref_name == 'main'
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ env.BACKEND2_VERSION }}
  #         name: Release ${{ env.BACKEND2_VERSION }}
  #         files: |
  #           backend2-image.tar
            
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #     - name: Download Trivy HTML report template
  #       run: |
  #         mkdir -p .trivy/templates
  #         curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o .trivy/templates/html.tpl
  #     - name: Tirvy Scan
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         image-ref: amritpoudel/backend2:${{ env.BACKEND2_VERSION }}
          
  #         format: template
  #         template: '@.trivy/templates/html.tpl'
  #         output: backend2-scan.html
  #     - name: Uploading backend2 scan report 
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: backend2-report
  #         path: backend2-scan.html


  # merge-report:
  #  needs: [frontend, backend1 , backend2]
  #  runs-on: ubuntu-latest
  #  steps:
  #   - name:  frontend scan report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: frontend-report
  #       path: scan/frontend
  #   - name:  backend1 scan report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: backend1-report
  #       path: scan/backend1
  #   - name:  backend2 scan report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: backend2-report
  #       path: scan/backend2

  #   - name: Mixing All three report 
  #     run: | 
  #       mkdir -p scan

  #       echo '<html><head><title>Trivy Scan Reports</title></head><body><h1>Combined Trivy Reports</h1>' > scan/index.html

  #       cat scan/frontend/frontend-scan.html >> scan/index.html
  #       echo '<hr>' >> scan/index.html

  #       cat scan/backend1/backend1-scan.html >> scan/index.html
  #       echo '<hr>' >> scan/index.html

  #       cat scan/backend2/backend2-scan.html >> scan/index.html

  #       echo '</body></html>' >> scan/index.html
  #   - name: upload mixed scan report
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: merged-scan-report
  #       path: scan/index.html


  # github-pages:
  #  needs: [frontend , merge-report]
  #  permissions:
  #     contents: write
  #  if: |
  #    needs.changes.outputs.frontend == 'true'  && github.ref_name == 'main'
    
  #  runs-on: ubuntu-latest
  #  steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: setting up Node.js
  #     uses: actions/setup-node@v4
  #   - name: Cache node modules
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         **/node_modules
  #       key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
  #       restore-keys: |
  #         ${{ runner.os }}-modules-

  #   - name: Installing dependencies.
  #     run: yarn install
  #     working-directory: ./frontend

  #   - name: Building Frontend
  #     env:
  #       VITE_CLERK_PUBLISHABLE_KEY: ${{ vars.VITE_CLERK_PUBLISHABLE_KEY }}
  #     run: yarn build
  #     working-directory: ./frontend
   

  #   - name: Download merged scan report artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: merged-scan-report
  #       path: scan

  #   - name: Copy merged scan report into frontend dist folder
  #     run: |
  #       mkdir -p ./frontend/dist/scan
  #       cp scan/index.html ./frontend/dist/scan/report.html
  #   - name: Deploy
  #     uses: peaceiris/actions-gh-pages@v4
  #     with:
  #       github_token: ${{ secrets.GITHUB_TOKEN }}
  #       publish_dir: ./frontend/dist
  #       publish_branch: gh-pages

  deploy-vm:
   runs-on: backend
   environment: >
      ${{ startsWith(github.ref_name, 'feature/') && 'feature' ||
          github.ref_name == 'dev' && 'dev' ||
          github.ref_name == 'main' && 'main' }}
   steps:
     - name: PostgresSql
       run: |
          ssh -o StrictHostKeyChecking=no kali@192.168.0.106 << EOF
            docker network create fellownetwork || true
            docker volume create pg_data || true

            docker run -d \
              --name postgresql \
              --network fellownetwork \
              -p 5432:5432 \
              -e POSTGRES_USER=$DB_USER \
              -e POSTGRES_PASSWORD=$DB_PASSWORD \
              -e POSTGRES_DB=$DB_NAME \
              -v pg_data:/var/lib/postgresql/data \
              --restart always \
              --cpus=1.0 \
              --memory=1g \
              postgres:17.5-alpine3.22
          EOF
     - name: Backend1
       run: |
        ssh -o StrictHostKeyChecking=no kali@192.168.0.106 << EOF
            docker run -d \
              --name backend1 \
              --network fellownetwork \
              -p 3000:3000 \
              -e PORT=3000 \
              -e DB_PORT=$DB_PORT \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              -e DB_CLIENT=$DB_CLIENT \
              -e NODE_ENV=$NODE_ENV \
              -e CLERK_PUBLISHABLE_KEY="$CLERK_PUBLISHABLE_KEY" \
              -e CLERK_SECRET_KEY="$CLERK_SECRET_KEY" \
              amritpoudel/backend1:latest
        EOF
     - name: Run migrations on backend1
       run: |
          ssh -o StrictHostKeyChecking=no kali@192.168.0.106 << EOF
            docker exec backend1 yarn migrate
          EOF
     - name: Backend2
       run: |
        ssh -o StrictHostKeyChecking=no kali@192.168.0.106 << EOF
            docker run -d \
              --name backend2 \
              --network fellownetwork \
              -p 3001:3001 \
              -e PORT=3001 \
              -e DB_PORT=$DB_PORT \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              -e DB_CLIENT=$DB_CLIENT \
              -e NODE_ENV=$NODE_ENV \
              -e CLERK_PUBLISHABLE_KEY="$CLERK_PUBLISHABLE_KEY" \
              -e CLERK_SECRET_KEY="$CLERK_SECRET_KEY" \
              amritpoudel/backend2:latest
        EOF
        
     - name: Run migrations on backend1
       run: |
          ssh -o StrictHostKeyChecking=no kali@192.168.0.106 << EOF
            docker exec backend2 yarn migrate
          EOF


  # github-pages:
  #   needs: frontend
  #   if: needs.changes.outputs.frontend == 'true' && github.ref_name == 'main'
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   permissions:
  #     contents: read      # To read repo contents
  #     pages: write        # To deploy to Pages
  #     id-token: write     # Required by deploy-pages

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 18

  #     - name: Install dependencies
  #       run: yarn install
  #       working-directory: ./frontend

  #     - name: Build frontend
  #       run: yarn build
  #       working-directory: ./frontend
  #       env:
  #         VITE_CLERK_PUBLISHABLE_KEY: ${{ vars.VITE_CLERK_PUBLISHABLE_KEY }}

  #     - name: Add 404.html for SPA routing
  #       run: cp ./frontend/dist/index.html ./frontend/dist/404.html

  #     - name: Upload Pages artifact
  #       uses: actions/upload-pages-artifact@v3
  #       with:
  #         path: ./frontend/dist

  # deploy-pages:
  #   needs: github-pages
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4          
  

 
